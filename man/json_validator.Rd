% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{json_validator}
\alias{json_validator}
\title{Create a json validator}
\usage{
json_validator(schema, engine = "imjv", reference = NULL)
}
\arguments{
\item{schema}{Contents of the json schema, or a filename
containing a schema.}

\item{engine}{Specify the validation engine to use.  Options are
"imjv" (the default; which uses "is-my-json-valid") and "ajv"
(Another JSON Schema Validator).  The latter supports more
recent json schema features.}

\item{reference}{Reference within schema to use for validating against a
sub-schema instead of the full schema passed in. For example
if the schema has a 'definitions' list including a definition for a
'Hello' object, one could pass "#/definitions/Hello" and the validator
would check that the json is a valid "Hello" object. Only available if
\code{engine = 'ajv'}.}
}
\description{
Create a validator that can validate multiple json files.
}
\section{Using multiple files}{


Multiple files are supported.  You can have a schema that
  references a file \code{child.json} using \code{{"$ref":
  "child.json"}} - in this case if \code{child.json} includes an
  \code{id} or \code{$id} element it will be silently dropped and
  the filename used to reference the schema will be used as the
  schema id.

The support is currently quite limited - it will not (yet) read
  sub-child schemas relative to child schema \code{$id} url, and
  does not suppoort reading from URLs (only local files are
  supoported).
}

\examples{
# A simple schema example:
schema <- '{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Product",
    "description": "A product from Acme\'s catalog",
    "type": "object",
    "properties": {
        "id": {
            "description": "The unique identifier for a product",
            "type": "integer"
        },
        "name": {
            "description": "Name of the product",
            "type": "string"
        },
        "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
        },
        "tags": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "required": ["id", "name", "price"]
}'

# Create a validator function
v <- jsonvalidate::json_validator(schema)

# Test if some (invalid) json conforms to the schema
v("{}", verbose = TRUE)

# Test if some (valid) json conforms to the schema
v('{
    "id": 1,
    "name": "A green door",
    "price": 12.50,
    "tags": ["home", "green"]
}')

# Using features from draft-06 or draft-07 requires the ajv engine:
schema <- "{
  '$schema': 'http://json-schema.org/draft-06/schema#',
  'type': 'object',
  'properties': {
    'a': {
      'const': 'foo'
    }
  }
}"

# Create the validator
v <- jsonvalidate::json_validator(schema, engine = "ajv")

# This confirms to the schema
v('{"a": "foo"}')

# But this does not
v('{"a": "bar"}')
}
